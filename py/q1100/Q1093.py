"""
 * 我们对 0 到 255 之间的整数进行采样，并将结果存储在数组 count 中：count[k] 就是整数 k 在样本中出现的次数。
 * 计算以下统计数据:
 * 1、minimum ：样本中的最小元素。
 * 2、maximum ：样品中的最大元素。
 * 3、mean ：样本的平均值，计算为所有元素的总和除以元素总数。
 * 4、median ：
 *      如果样本的元素个数是奇数，那么一旦样本排序后，中位数 median 就是中间的元素。
 *      如果样本中有偶数个元素，那么中位数median 就是样本排序后中间两个元素的平均值。
 * 5、mode ：样本中出现次数最多的数字。保众数是 唯一 的。
 * 以浮点数数组的形式返回样本的统计信息 [minimum, maximum, mean, median, mode] 。与真实答案误差在 10^-5 内的答案都可以通过。
 * 提示：
 * 1、count.length == 256
 * 2、0 <= count[i] <= 10^9
 * 3、1 <= sum(count) <= 10^9
 * 4、count 的众数是 唯一 的
 * 链接：https://leetcode.cn/problems/statistics-from-a-large-sample/description/
"""
from typing import List


class Solution:

    def sampleStats(self, count: List[int]) -> List[float]:
        minimum, maximum, sm, median, mode = 255, 0, 0.0, 0.0, 0
        cnt = 0
        for i in range(len(count)):
            if count[i] != 0:
                minimum = min(minimum, i)
                maximum = max(maximum, i)
                sm += i * count[i]
                cnt += count[i]
                if count[i] > count[mode]:
                    mode = i
        i1, i2 = cnt // 2, cnt // 2 - ((cnt & 1)^1)

        def get_idx(idx):
            cnt = 0
            for i in range(len(count)):
                if count[i] + cnt > idx:
                    return i
                cnt += count[i]
            return -1

        return [minimum, maximum, sm / cnt, (get_idx(i1) + get_idx(i2)) / 2, mode]


if __name__ == '__main__':
    # [1.00000,3.00000,2.37500,2.50000,3.00000]
    print(Solution().sampleStats([
        0, 1, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ]))
    # [1.00000,4.00000,2.18182,2.00000,1.00000]
    print(Solution().sampleStats([
        0, 4, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ]))
    #
    # print(Solution().sampleStats())