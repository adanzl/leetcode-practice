"""
 * 一个 k 镜像数字 指的是一个在十进制和 k 进制下从前往后读和从后往前读都一样的 没有前导 0 的 正 整数。
 * 1、比方说，9 是一个 2 镜像数字。9 在十进制下为 9 ，二进制下为 1001 ，两者从前往后读和从后往前读都一样。
 * 2、相反地，4 不是一个 2 镜像数字。4 在二进制下为 100 ，从前往后和从后往前读不相同。
 * 给你进制 k 和一个数字 n ，请你返回 k 镜像数字中 最小 的 n 个数 之和 。
 * 提示：
 * 1、2 <= k <= 9
 * 2、1 <= n <= 30
 * 链接：https://leetcode.cn/problems/sum-of-k-mirror-numbers/
"""

#
# @lc app=leetcode.cn id=2081 lang=python3
#
# [2081] k 镜像数字的和
#
# @lc code=start


def int_base_r(num, base):
    if num == 0: return '0'
    res = []
    while num:
        res.append(str(num % base))
        num //= base
    return res


def calc(num0, num1):
    ret = num0
    while num1:
        num1, r = divmod(num1, 10)
        ret = ret * 10 + r
    return ret


# 下一个回文数组，获取的是[10^(num_len-1), 10^num_len)范围内的回文
# 相同范围内，奇数组的数据一定小于偶数组的，所以先计算奇数组再计算偶数组
def next_palindrome_group(num_len: int, e):
    ret = []
    for num in range(10**(num_len - 1), 10**num_len):
        if e == 0:  # odd
            ret.append(calc(num, num // 10))
        else:  # even
            ret.append(calc(num, num))
    return ret


arr = [[0] for _ in range(10)]


def build_arr():
    size, e = 1, 0
    k_set = set(range(2, 10))
    while True:
        nums = next_palindrome_group(size, e)
        for num in nums:
            n_k_set = set()
            for k in k_set:
                if len(arr[k]) == 31:
                    continue
                n_k_set.add(k)
                bs = int_base_r(num, k)
                if bs == bs[::-1]:
                    arr[k].append(num + arr[k][-1])
            k_set = n_k_set
            if not k_set: return
        size += e
        e ^= 1


build_arr()

# 打表
# arr = [[0], [0],
#        [
#            0, 1, 4, 9, 16, 25, 58, 157, 470, 1055, 1772, 9219, 18228, 33579, 65802, 105795, 159030, 212865, 286602, 872187, 2630758, 4565149, 6544940, 9674153, 14745858, 20005383, 25846868, 39347399,
#            759196316, 1669569335, 2609044274
#        ],
#        [
#            0, 1, 3, 7, 15, 136, 287, 499, 741, 1225, 1881, 2638, 31730, 80614, 155261, 230718, 306985, 399914, 493653, 1342501, 2863752, 5849644, 9871848, 14090972, 18342496, 22630320, 28367695,
#            36243482, 44192979, 71904751, 155059889
#        ],
#        [
#            0, 1, 3, 6, 11, 66, 439, 832, 1498, 2285, 3224, 11221, 64456, 119711, 175366, 233041, 739646, 2540727, 4755849, 8582132, 12448815, 17500320, 22726545, 27986070, 33283995, 38898160,
#            44577925, 98400760, 721411086, 1676067545, 53393239260
#        ],
#        [
#            0, 1, 3, 6, 10, 16, 104, 356, 638, 1264, 1940, 3161, 18912, 37793, 10125794, 20526195, 48237967, 78560270, 126193944, 192171900, 1000828708, 1832161846, 2664029984, 3500161622, 4336343260,
#            6849225412, 9446112364, 12339666346, 19101218022, 31215959143, 43401017264
#        ],
#        [
#            0, 1, 3, 6, 10, 15, 22, 77, 188, 329, 520, 863, 1297, 2074, 2942, 4383, 12050, 19827, 41849, 81742, 156389, 325250, 1134058, 2043967, 3911648, 7009551, 11241875, 15507499, 19806423,
#            24322577, 28888231
#        ],
#        [
#            0, 1, 3, 6, 10, 15, 21, 29, 150, 321, 563, 855, 17416, 83072, 2220384, 6822448, 13420404, 20379000, 29849749, 91104965, 321578997, 788407661, 1273902245, 1912731081, 2570225837, 3428700695,
#            29128200347, 69258903451, 115121130305, 176576075721, 241030621167
#        ],
#        [
#            0, 1, 3, 6, 10, 15, 21, 28, 37, 158, 450, 783, 1156, 1570, 2155, 5818, 14596, 27727, 41058, 67520, 94182, 124285, 154588, 362290, 991116, 1651182, 3148123, 5083514, 7054305, 11253219,
#            66619574
#        ],
#        [
#            0, 1, 3, 6, 10, 15, 21, 28, 36, 227, 509, 882, 1346, 1901, 2547, 3203, 10089, 35841, 63313, 105637, 156242, 782868, 2323319, 4036490, 5757761, 7586042, 9463823, 11349704, 13750746,
#            16185088, 18627530
#        ]]


class Solution:

    def kMirror(self, k: int, n: int) -> int:
        return arr[k][n]


# @lc code=end

if __name__ == '__main__':
    # 25
    print(Solution().kMirror(2, n=5))
    # 499
    print(Solution().kMirror(3, n=7))
    # 20379000
    print(Solution().kMirror(7, n=17))
