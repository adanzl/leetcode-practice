"""
 * 小扣在秋日市集入口处发现了一个数字游戏。主办方共有 N 个计数器，计数器编号为 0 ~ N-1。
 * 每个计数器上分别显示了一个数字，小扣按计数器编号升序将所显示的数字记于数组 nums。
 * 每个计数器上有两个按钮，分别可以实现将显示数字加一或减一。小扣每一次操作可以选择一个计数器，按下加一或减一按钮。
 * 主办方请小扣回答出一个长度为 N 的数组，第 i 个元素(0 <= i < N)表示，
 * 将 0~i 号计数器 初始 所示数字操作成满足所有条件 nums[a]+1 == nums[a+1],(0 <= a < i) 的最小操作数。
 * 回答正确方可进入秋日市集。
 * 由于答案可能很大，请将每个最小操作数对 1,000,000,007 取余。
 * 提示：
 * 1、1 <= nums.length <= 10^5
 * 2、1 <= nums[i] <= 10^3
 * 链接：https://leetcode.cn/problems/5TxKeK
"""
from heapq import heappop, heappush, heapreplace
from typing import List


class Solution:

    def numsGame(self, nums: List[int]) -> List[int]:
        N, MOD = len(nums), 10**9 + 7
        ans = [0] * N
        # 对顶栈求中位数
        h_big, h_small = [], []
        sm_l, sm_r = 0, 0
        for i, num in enumerate(nums):
            v = num - i
            heappush(h_big, -v)
            sm_l += v
            while len(h_big) - len(h_small) > 1:
                t = -heappop(h_big)
                heappush(h_small, t)
                sm_l -= t
                sm_r += t
            while h_small and h_big and h_small[0] < -h_big[0]:
                l = -heappop(h_big)
                r = heapreplace(h_small, l)
                heappush(h_big, -r)
                sm_l += r - l
                sm_r += l - r
            d = len(h_big) - len(h_small)
            ans[i] = (sm_r - sm_l + (-h_big[0] if d else 0)) % MOD
        return ans


if __name__ == '__main__':
    # [0,154,375,704,704,1355,1547,1617,1617,1843,2142,2410,2665,3046,3188,3373,3710,3879,4163,4272,4619,4657,4698,5307,5531,5721,6211,6214,6283,6587,7179,7729,7923,8029,8186,8423,8725,9049,9492,9544,9836,10202,10317,10337,10489,10801,10823,10998,11562,11624,11707,11719,11957,12108,12728,12735,13114,13247,13581,13737,14199,14487,14703,15318,15659,16083,16285,16850,16972,17216,17586,17725,18059,18415,18975,19290,19398,19658,19704,19839,20005,20197,20628,20918,20945,21269,21579,21779,22368,22739,22880,23300,23300,23440,23484,23661,24023,24191,24513]
    print(Solution().numsGame([
        471, 626, 848, 957, 788, 138, 982, 721, 729, 956, 432, 1000, 478, 353, 586, 544, 304, 811, 359, 535, 992, 684,
        606, 39, 384, 799, 120, 608, 540, 914, 19, 62, 410, 711, 449, 370, 263, 890, 124, 516, 861, 936, 729, 595, 768,
        929, 649, 803, 65, 692, 548, 620, 871, 785, 15, 629, 251, 764, 973, 484, 172, 923, 859, 29, 297, 215, 436, 74,
        762, 885, 272, 504, 307, 998, 83, 329, 520, 889, 584, 496, 443, 802, 180, 322, 640, 290, 292, 403, 11, 230, 743,
        183, 600, 741, 558, 780, 970, 777, 288
    ]))
    # [0,0,0,5,6,7]
    print(Solution().numsGame([3, 4, 5, 1, 6, 7]))
    # [0,0,0,0,0]
    print(Solution().numsGame([1, 2, 3, 4, 5]))
    # [0,1,2,3,3,3]
    print(Solution().numsGame([1, 1, 1, 2, 3, 4]))
